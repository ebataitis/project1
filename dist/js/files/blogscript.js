"use strict";console.log("blogscript running");var DOMStrings={blogLeftPost:document.querySelectorAll(".blog-left-post"),blogLeftPostButton:document.querySelectorAll(".blog-left-post button"),blogLeftPostText:document.querySelectorAll(".blog-left-post .post-text"),blogNav:document.querySelector(".blog-left ul"),shareComentArea:document.querySelector(".share-coment-area"),nav:document.querySelector("header .main-menu nav"),blogLeft:document.querySelector(".blog-left")},blogLeftPost=Array.prototype.slice.call(DOMStrings.blogLeftPost),blogLeftPostText=Array.prototype.slice.call(DOMStrings.blogLeftPostText);window.onload=function(){for(var t=0;t<blogLeftPostText.length;t++)blogLeftPostText[t].style.height="72px"};for(var g=Array.prototype.slice.call(DOMStrings.blogLeftPostButton),ind=g.length+1,_loop=function(t){!function(e){g[t].onclick=function(){ind=e;blogLeftPost.splice(ind,1);for(var t=0;t<blogLeftPost.length;t++)blogLeftPost[t].style.display="none";blogLeftPostText[e].style.height="",g[ind].style.display="none",DOMStrings.blogNav.style.display="none",DOMStrings.shareComentArea.style.display="block"}}(t)},i=0;i<g.length;i++)_loop(i);$(".fa-bars").click(function(){$("header .main-menu nav").slideToggle()}),window.addEventListener("resize",function(){window.innerWidth>600?DOMStrings.nav.style.display="block":window.innerWidth<=600&&(DOMStrings.nav.style.display="none")}),$.getJSON("http://localhost:3000/project1/dist/blognews.json",function(t){t.news.forEach(function(e,o){var n='\n        <div class="blog-left-post">\n        <div class="img">\n        <img src="'+t.news[o].img+'" alt="Blog foto">\n        <div class="date">\n        <p>'+t.news[o].date1+"</p>\n        <p>"+t.news[o].date2+"</p>\n</div>\n</div>\n<h3>"+t.news[o].heading+'</h3>\n<p class="post-text">'+t.news[o].postText+'</p>\n<div class="btn">\n<button>'+t.news[o].buttonText+"</button>\n</div>\n</div>";DOMStrings.blogLeft.insertAdjacentHTML("afterbegin",n);var l=document.querySelectorAll(".blog-left-post button"),s=document.querySelectorAll(".blog-left-post .post-text");l.forEach(function(t,e){s[e].style.height="72px",t.addEventListener("click",function(){console.log("pyp"),s[e].style.color="red",s[e].style.height=""})})})}),console.log(DOMStrings.blogLeftPostButton);
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImJsb2dzY3JpcHQuanMiXSwibmFtZXMiOlsiY29uc29sZSIsImxvZyIsImJsb2dMZWZ0UG9zdCIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvckFsbCIsIkRPTVN0cmluZ3MiLCJibG9nTGVmdFBvc3RCdXR0b24iLCJibG9nTGVmdFBvc3RUZXh0IiwiYmxvZ05hdiIsInF1ZXJ5U2VsZWN0b3IiLCJzaGFyZUNvbWVudEFyZWEiLCJibG9nTGVmdCIsInNsaWNlIiwiY2FsbCIsIkFycmF5IiwicHJvdG90eXBlIiwid2luZG93IiwiaSIsIm9ubG9hZCIsInN0eWxlIiwiaGVpZ2h0IiwiZyIsImluZCIsImxlbmd0aCIsIm9uY2xpY2siLCJpbmRleCIsInNwbGljZSIsImoiLCJkaXNwbGF5IiwiJCIsImNsaWNrIiwic2xpZGVUb2dnbGUiLCJhZGRFdmVudExpc3RlbmVyIiwiaW5uZXJXaWR0aCIsIm5hdiIsImdldEpTT04iLCJkYXRhIiwiaHRtbCIsIm5ld3MiLCJpbWciLCJmb3JFYWNoIiwiZGF0ZTEiLCJoZWFkaW5nIiwiYmxvZ0xlZnRQb3N0QnRuIiwiaW5zZXJ0QWRqYWNlbnRIVE1MIiwiYmxvZ0xlZnRUZXh0IiwiaXRlbSIsImNvbG9yIl0sIm1hcHBpbmdzIjoiYUFBQUEsUUFBUUMsSUFBSSxzQkFBWkQsSUFBQUEsWUFHSUUsYUFBY0MsU0FBU0MsaUJBQWlCLG1CQUR0Q0MsbUJBQWFGLFNBQUFDLGlCQUFBLDBCQUNmRixpQkFBY0MsU0FBU0MsaUJBQWlCLDhCQUN4Q0UsUUFBQUEsU0FBQUEsY0FBNkJGLGlCQUM3QkcsZ0JBQUFBLFNBQWtCSixjQUFTQyxzQkFDM0JJLElBQUFBLFNBQVNMLGNBQVNNLHlCQUNsQkMsU0FBQUEsU0FBaUJQLGNBQVNNLGVBRTFCRSxhQUFVUixNQUFTTSxVQUFjRyxNQUFBQyxLQUFBUixXQUF2QkgsY0FQZEssaUJBQUFPLE1BQUFDLFVBQUFILE1BQUFDLEtBQUFSLFdBQUFFLGtCQVNBUyxPQUFNZCxPQUFBQSxXQUNBSyxJQUFBQSxJQUFBQSxFQUFBQSxFQUFBQSxFQUFtQk8saUJBQWdCRixPQUFoQkssSUFDbEJDLGlCQUFTRCxHQUFZRSxNQUFBQyxPQUFBLFFBTTVCLElBQU1DLElBTk5BLEVBQUFQLE1BQUFDLFVBQUFILE1BQUFDLEtBQUFSLFdBQUFDLG9CQUtBZ0IsSUFBQUQsRUFBQUUsT0FBQSxpQkFDVVQsSUFDTlEsU0FBUUMsR0FHSkYsRUFBRUosR0FBR08sUUFBVSxXQUNYRixJQUFNRyxFQUZJdkIsYUFBQXdCLE9BQUFKLElBQUEsR0FDZCxJQUFLRSxJQUFMRyxFQUFlLEVBQUFBLEVBQUF6QixhQUFZcUIsT0FBQUksSUFDdkJMLGFBQUFLLEdBQUFSLE1BQUFTLFFBQUEsT0FFQXJCLGlCQUFnQm9CLEdBQUl6QixNQUFBQSxPQUFwQixHQUNJQSxFQUFBQSxLQUFBQSxNQUFBQSxRQUFnQmlCLE9BQ25CZCxXQUFBRyxRQUFBVyxNQUFBUyxRQUFBLE9BQ0RyQixXQUFBQSxnQkFBd0JZLE1BQU1DLFFBQTlCLFNBVFJFLENBV1FqQixJQVpGUyxFQUFBQSxFQUFNQyxFQUFBQSxFQUFBQSxPQUFnQkYsSUFBS1IsTUFBM0JTLEdBZUxlLEVBQUEsWUFaREMsTUFBQSxXQWdCQUQsRUFBRSx5QkFBeUJFLGdCQWpCL0JmLE9BQUtnQixpQkFBaUJULFNBQXRCLFdBQW1DUCxPQUFBaUIsV0FBQSxJQWVsQzVCLFdBQUE2QixJQUFBZixNQUFBUyxRQUFBLFFBQ2FFLE9BQU1HLFlBQVksTUFDMUI1QixXQUFBNkIsSUFBQWYsTUFBRlMsUUFBMkJHLFVBRzNCRixFQUFBTSxRQUFJbkIsb0RBQXlCLFNBQUFvQixHQUN6Qi9CLEVBQUFBLEtBQUFBLFFBQUEsU0FBZWMsRUFBTVMsR0FEekIsSUFFT1MsRUFBQUEsd0ZBSFhELEVBQUFFLEtBQUFyQixHQUFBc0IsSUFHVyw4REFLUEgsRUFBVUksS0FBUXZCLEdBQUF3QixNQUxYLG9CQU1HSixFQUFBQSxLQUFBQSxHQUFBQSxNQU5ILDZCQXVCSEQsRUFBQUUsS0FBQXJCLEdBQUF5QixRQXZCRywrQkF3QkdDLEVBQUFBLEtBQWtCeEMsR0FBQUEsU0F4QnJCLG9DQTBCSHdDLEVBQUFBLEtBQUFBLEdBQUFBLFdBMUJHLDRCQTZCSzNDLFdBQUFBLFNBQVk0QyxtQkFBWixhQUFBUCxHQUlILElBTERNLEVBQUF4QyxTQUFBQyxpQkFBQSwwQkFGSnlDLEVBQUExQyxTQUFBQyxpQkFBQSw4QkFyQkp1QyxFQUFBSCxRQUFBLFNBQUFNLEVBQUE3QixHQURKNEIsRUFBQTVCLEdBQUFFLE1BQUFDLE9BQUEsT0FpQ1lmLEVBQUFBLGlCQUFXQyxRQUF2QixXQVJnQk4sUUFBUUMsSUFBSSxPQUNaNEMsRUFBYTVCLEdBQUdFLE1BQU00QixNQUFRLE1BQzlCRixFQUFhNUIsR0FBR0UsTUFBTUMsT0FBUyxXQU0vQ3BCLFFBQVFDLElBQUlJLFdBQVdDIiwiZmlsZSI6ImJsb2dzY3JpcHQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zb2xlLmxvZygnYmxvZ3NjcmlwdCBydW5uaW5nJyk7XHJcblxyXG5jb25zdCBET01TdHJpbmdzID0ge1xyXG4gICAgYmxvZ0xlZnRQb3N0OiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuYmxvZy1sZWZ0LXBvc3QnKSxcclxuICAgIGJsb2dMZWZ0UG9zdEJ1dHRvbjogZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmJsb2ctbGVmdC1wb3N0IGJ1dHRvbicpLFxyXG4gICAgYmxvZ0xlZnRQb3N0VGV4dDogZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmJsb2ctbGVmdC1wb3N0IC5wb3N0LXRleHQnKSxcclxuICAgIGJsb2dOYXY6IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5ibG9nLWxlZnQgdWwnKSxcclxuICAgIHNoYXJlQ29tZW50QXJlYTogZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnNoYXJlLWNvbWVudC1hcmVhJyksXHJcbiAgICBuYXY6IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2hlYWRlciAubWFpbi1tZW51IG5hdicpLFxyXG4gICAgYmxvZ0xlZnQ6IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5ibG9nLWxlZnQnKVxyXG59O1xyXG5jb25zdCBibG9nTGVmdFBvc3QgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChET01TdHJpbmdzLmJsb2dMZWZ0UG9zdCk7XHJcbmNvbnN0IGJsb2dMZWZ0UG9zdFRleHQgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChET01TdHJpbmdzLmJsb2dMZWZ0UG9zdFRleHQpO1xyXG53aW5kb3cub25sb2FkID0gZnVuY3Rpb24gKCkge1xyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBibG9nTGVmdFBvc3RUZXh0Lmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgYmxvZ0xlZnRQb3N0VGV4dFtpXS5zdHlsZS5oZWlnaHQgPSAnNzJweCdcclxuICAgIH1cclxufTtcclxuLy8gcGFzcGF1ZHVzIG15Z3R1a2EgaXNzaXNrbGVpZHppYSBwb3N0YXM6XHJcbmNvbnN0IGcgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChET01TdHJpbmdzLmJsb2dMZWZ0UG9zdEJ1dHRvbik7XHJcbnZhciBpbmQgPSBnLmxlbmd0aCArIDE7XHJcbmZvciAobGV0IGkgPSAwOyBpIDwgZy5sZW5ndGg7IGkrKykge1xyXG4gICAgKGZ1bmN0aW9uIChpbmRleCkge1xyXG4gICAgICAgIGdbaV0ub25jbGljayA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgaW5kID0gaW5kZXg7XHJcbiAgICAgICAgICAgIGxldCBibG9nU3BsaWNlZCA9IGJsb2dMZWZ0UG9zdC5zcGxpY2UoaW5kLCAxKTtcclxuICAgICAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBibG9nTGVmdFBvc3QubGVuZ3RoOyBqKyspIHtcclxuICAgICAgICAgICAgICAgIGJsb2dMZWZ0UG9zdFtqXS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGJsb2dMZWZ0UG9zdFRleHRbaW5kZXhdLnN0eWxlLmhlaWdodCA9ICcnO1xyXG4gICAgICAgICAgICBnW2luZF0uc3R5bGUuZGlzcGxheSA9ICdub25lJztcclxuICAgICAgICAgICAgRE9NU3RyaW5ncy5ibG9nTmF2LnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcbiAgICAgICAgICAgIERPTVN0cmluZ3Muc2hhcmVDb21lbnRBcmVhLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xyXG4gICAgICAgIH1cclxuICAgIH0pKGkpO1xyXG5cclxufVxyXG4kKCcuZmEtYmFycycpLmNsaWNrKGZ1bmN0aW9uICgpIHtcclxuICAgICQoJ2hlYWRlciAubWFpbi1tZW51IG5hdicpLnNsaWRlVG9nZ2xlKClcclxufSlcclxud2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIGZ1bmN0aW9uICgpIHtcclxuICAgIGlmICh3aW5kb3cuaW5uZXJXaWR0aCA+IDYwMCkge1xyXG4gICAgICAgIERPTVN0cmluZ3MubmF2LnN0eWxlLmRpc3BsYXkgPSBcImJsb2NrXCI7XHJcbiAgICB9IGVsc2UgaWYgKHdpbmRvdy5pbm5lcldpZHRoIDw9IDYwMCkge1xyXG4gICAgICAgIERPTVN0cmluZ3MubmF2LnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcclxuICAgIH1cclxufSlcclxuJC5nZXRKU09OKCdodHRwOi8vbG9jYWxob3N0OjMwMDAvcHJvamVjdDEvZGlzdC9ibG9nbmV3cy5qc29uJywgZnVuY3Rpb24gKGRhdGEpIHtcclxuICAgIGRhdGEubmV3cy5mb3JFYWNoKChpdGVtLCBpKSA9PiB7XHJcbiAgICAgICAgY29uc3QgaHRtbCA9IGBcclxuICAgICAgICA8ZGl2IGNsYXNzPVwiYmxvZy1sZWZ0LXBvc3RcIj5cclxuICAgICAgICA8ZGl2IGNsYXNzPVwiaW1nXCI+XHJcbiAgICAgICAgPGltZyBzcmM9XCIke2RhdGEubmV3c1tpXS5pbWd9XCIgYWx0PVwiQmxvZyBmb3RvXCI+XHJcbiAgICAgICAgPGRpdiBjbGFzcz1cImRhdGVcIj5cclxuICAgICAgICA8cD4ke2RhdGEubmV3c1tpXS5kYXRlMX08L3A+XHJcbiAgICAgICAgPHA+JHtkYXRhLm5ld3NbaV0uZGF0ZTJ9PC9wPlxyXG48L2Rpdj5cclxuPC9kaXY+XHJcbjxoMz4ke2RhdGEubmV3c1tpXS5oZWFkaW5nfTwvaDM+XHJcbjxwIGNsYXNzPVwicG9zdC10ZXh0XCI+JHtkYXRhLm5ld3NbaV0ucG9zdFRleHR9PC9wPlxyXG48ZGl2IGNsYXNzPVwiYnRuXCI+XHJcbjxidXR0b24+JHtkYXRhLm5ld3NbaV0uYnV0dG9uVGV4dH08L2J1dHRvbj5cclxuPC9kaXY+XHJcbjwvZGl2PmA7XHJcbiAgICAgICAgRE9NU3RyaW5ncy5ibG9nTGVmdC5pbnNlcnRBZGphY2VudEhUTUwoJ2FmdGVyYmVnaW4nLCBodG1sKTtcclxuXHJcbiAgICAgICAgLy8ga3JlaXBpbWFzaXMgaSBpa2VsdHVzIG15Z3R1a3VzXHJcbiAgICAgICAgY29uc3QgYmxvZ0xlZnRQb3N0QnRuID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmJsb2ctbGVmdC1wb3N0IGJ1dHRvbicpO1xyXG4gICAgICAgIGNvbnN0IGJsb2dMZWZ0VGV4dCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5ibG9nLWxlZnQtcG9zdCAucG9zdC10ZXh0JylcclxuICAgICAgICBibG9nTGVmdFBvc3RCdG4uZm9yRWFjaCgoaXRlbSwgaSkgPT4ge1xyXG4gICAgICAgICAgICBibG9nTGVmdFRleHRbaV0uc3R5bGUuaGVpZ2h0ID0gJzcycHgnO1xyXG4gICAgICAgICAgICBpdGVtLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ3B5cCcpO1xyXG4gICAgICAgICAgICAgICAgYmxvZ0xlZnRUZXh0W2ldLnN0eWxlLmNvbG9yID0gJ3JlZCc7XHJcbiAgICAgICAgICAgICAgICBibG9nTGVmdFRleHRbaV0uc3R5bGUuaGVpZ2h0ID0gJyc7XHJcblxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgIH0pXHJcbiAgICB9KVxyXG59KTtcclxuY29uc29sZS5sb2coRE9NU3RyaW5ncy5ibG9nTGVmdFBvc3RCdXR0b24pIl19
